<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

@see spark.components.SkinnableContainer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:fb="http://ns.adobe.com/flashbuilder/2009" mouseEnabled="false"
		minWidth="{hostComponent.minWidth}" minHeight="{hostComponent.minHeight}"
		>
	<fx:Metadata>
	
		[HostComponent("ehs.ui.CustomPanel")]
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			import print.IServerManager;
			import print.ServerManager;
			
			
		
			
			private var _overriddenStyles:Object = new Object();
			
			 override public function getStyle(styleProp:String):*
			{
				var value:* = null;	
				
				// if we override the borders before the window has been intialized, tools display nothing
				if (initialized )
				{
					// if we are hiding the borders, return style bogus values that cause the borders to hide
					/*if (!hostComponent.borderIsVisible)
					{
						// override border styles to hide the borders
						
						var borderProps:Array = [
							"borderThicknessTop",
							"borderThicknessBottom",
							"borderThicknessLeft",
							"borderThicknessRight",
							"headerHeight",
							"cornerRadius"
						];
						if (borderProps.indexOf(styleProp) >= 0)
							return 0;
						
						if (styleProp == "dropShadowEnabled")
							return false;
					}*/
				}
				
				if (_overriddenStyles[styleProp] != undefined )
					value = _overriddenStyles[styleProp];
				/*else if (styleProp == 'backgroundColor' && isFinite(hostComponent.contentBackgroundColor.value))
					value = hostComponent.contentBackgroundColor.value;
				else if (styleProp == 'borderColor' && isFinite(hostComponent.panelBorderColor.value))
					value = hostComponent.panelBorderColor.value;*/
				else
					value = super.getStyle(styleProp);
				
				var cornerRadius:int = _overriddenStyles["cornerRadius"] != undefined ? 
					_overriddenStyles["cornerRadius"] :
					super.getStyle("cornerRadius");
				
				var roundedBottomCorners:Boolean = _overriddenStyles["roundedBottomCorners"] != undefined ? 
					_overriddenStyles["roundedBottomCorners"] : 
					super.getStyle("roundedBottomCorners");
				
				// if the bottom corners are rounded, we want to adjust the bottomThicknessBottom to be at least the size
				// of the cornerRadius, otherwise you get an odd looking panel
				
				// THIS DOES NOT WORK UNLESS HEADERHEIGHT CHANGEs -- WHY FLEX, WHY?
				//if(roundedBottomCorners == true && styleProp == "borderThicknessBottom")
				//return Math.max( cornerRadius, value );
				
				// make sure the headerHeight is at least the size of the cornerRadius, otherwise the stuff inside the panel sticks
				// outside the panel
				if (styleProp == "headerHeight")
					return Math.max( cornerRadius, value );
				
				return value;
			} 
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				
				
				// Push backgroundColor and backgroundAlpha directly.
				// Handle undefined backgroundColor by hiding the background object.
				if (isNaN(getStyle("backgroundColor")))
				{
					background.visible = false;
				}
				else
				{
					background.visible = true;
					bgFill.color = getStyle("backgroundColor");
					bgFill.alpha = getStyle("backgroundAlpha");
				}
				
				if (isNaN(getStyle("borderColor")))
				{
					border.visible = false;
				}
				else
				{
					border.visible = true;
					var colorCode:Number = getStyle("borderColor");
					borderStroke.color = colorCode
					//titleBarColor.color = colorCode;
 					//borderStroke.alpha = getStyle("borderAlpha");
				}
				
				resizeBorder.depth = this.numElements;
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);				
			}
			
			
			
			
			
			protected function pdfClickHandler(event:MouseEvent):void
			{
				var pm:ServerManager =  WeaveAPI.ClassRegistry.getSingletonInstance(IServerManager) as ServerManager;
				pm.print();
				
			}
			
			
			
			
			
		]]>        
	</fx:Script>
	<fx:Declarations>
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	
	
	<!--<s:RectangularDropShadow id="dropShadow" blurX="10" blurY="10" 
							 alpha="1" distance="3" angle="0" color="#222222" left="0" 
							 top="3" right="3" bottom="0" />-->
	<!-- drop shadow can't be hittable so all other graphics go in this group -->
	
	<s:Group left="0" right="0" top="0" bottom="0" width="100%" height="100%"  >
				
		<!-- layer 1: border -->
		<!--- @private -->
		<s:Rect id="border" left="0" right="0" top="0" bottom="0" >
			<s:stroke>
				<!--- @private -->
				<s:SolidColorStroke id="borderStroke" weight="2"  /> <!--color="#54585e" -->
			</s:stroke>
		</s:Rect>
		
		<s:Rect id="resizeBorder" left="0" right="0" top="0" bottom="0" >
			<s:stroke>
				<!--- @private -->
				<s:SolidColorStroke id="resizeBorderStroke" weight="6"   alpha="0"  /> 
			</s:stroke>
		</s:Rect>
		
		<!-- layer 2: background fill -->
		<!--Background color and alpha are set from backgroundcolor property and updated in Update display list-->
		<!--- Defines the appearance of the SkinnableContainer class's background. -->
		<s:Rect id="background" left="1" right="1" top="1" bottom="1">
			<s:fill>
				<!--- @private -->
				<s:SolidColor id="bgFill" color="0x202425"/>
			</s:fill>
		</s:Rect>
		
		<!-- layer 3: contents -->
		<!--- Contains the vertical stack of titlebar content and controlbar. -->
		<s:Group left="1" right="1" top="1" bottom="1" id="contents"  >
			<s:layout >
				<s:VerticalLayout  gap="0" horizontalAlign="justify"   />
			</s:layout>
				
			<!--- @private -->
			<s:Group id="topGroup" minWidth="0" height="40"  >
				
				<!-- layer 0: title bar fill -->
				<!--- @private -->
				<s:Rect id="tbFill" left="0" right="0" top="0" bottom="0">
					<s:fill>
						<s:LinearGradient rotation="90">
							<!--<s:GradientEntry color="0XB9B9B9" />-->
							<s:GradientEntry color="0XE3E3E3" />
							<s:GradientEntry color="0XB9B9a6" />
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				
				
							
				<!-- layer 3.3: titleBar -->
				<s:Group id="titleBar" left="0" right="0" top="0" bottom="0"   >
					<!-- layer 3.3.1: titleBar -->
					<s:HGroup id="titleSettingsHolder" left="16" top="2" bottom="2" 
							  horizontalAlign="left" verticalAlign="middle" gap="2" minWidth="0"  >
						<s:Label id="titleLabel" maxDisplayedLines="1" text="{this.hostComponent.title}"
								 bottom="0"  verticalAlign="middle" textAlign="start" fontWeight="bold"
								 fontSize="14" fontFamily="arial" color="0x555555"  >
						</s:Label>
						
					</s:HGroup> 
					
					
					<!-- layer 3.3.2: controlsHolder -->
					<s:HGroup id="titleBarStatusHolder" right="8" top="2" bottom="2" gap="2" horizontalAlign="right" verticalAlign="middle"  >
						
						<s:Label id="statusLabel" maxDisplayedLines="1" text="{this.hostComponent.status}"
								 bottom="0" verticalAlign="middle" textAlign="start" fontWeight="bold" color="0X888888"
								 fontSize="14" fontFamily="arial"  >
						</s:Label>
						<s:Image source="@Embed(source='/../ehs/resources/images/pdf.png')" click="pdfClickHandler(event)"   
								 useHandCursor="true" buttonMode="true" focusEnabled="true" 
								 width="32" height="32"  />
						<!--<s:Image id="saveIcon" source="@Embed(source='/../ehs/resources/images/floppy.png')" click="EHS.properties.saveTemplateToServer(event)"   
								 useHandCursor="true" buttonMode="true" focusEnabled="true" 
								 width="32" height="32"  />-->
					</s:HGroup>   
				</s:Group>
				
				                    
			</s:Group>
			<!--
			Note: setting the minimum size to 0 here so that changes to the host component's
			size will not be thwarted by this skin part's minimum size.   This is a compromise,
			more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
			-->
			<!--- @copy spark.components.SkinnableContainer#contentGroup -->
			<s:Group id="contentGroup"  minWidth="0" minHeight="0"  width="100%" height="100%">
				<s:layout>
					<s:BasicLayout clipAndEnableScrolling="true" />
				</s:layout>
			</s:Group>
			
		</s:Group>
	</s:Group>	
	
</s:Skin>
