<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  implements="weave.api.ui.ILinkableLayoutManager,weave.api.core.IDisposableObject"
		 minHeight="0" height="100%" width="100%" xmlns:managers="com.adobe.devnet.managers.*" xmlns:components="com.rectius.examples.pod.components.*" >
	<s:HGroup height="100%" width="100%"  gap="0" id="menuHolder">
		<s:Group height="100%" id="menuMode"   minWidth="0" minHeight="0">
			<s:Rect left="0" right="0" top="0" bottom="0">
				<s:fill><s:SolidColor id="menuBgFill"   color="0x36373b" /></s:fill>					
			</s:Rect>
			<s:ButtonBar skinClass="ehs.ui.skins.EhsButtonBarSkin" id="pageMenu"  
						 dataProvider="{linkData}" change="pageMenu_changeHandler(event)"/>				
		</s:Group>
		<s:Group  width="100%" height="100%" id="viewArea" >				
			<s:Rect left="0" right="0" top="0" bottom="0">
				<s:fill><s:SolidColor id="bgFill" color="0x202425" /></s:fill>					
			</s:Rect>
			<s:Scroller left="8" right="4" top="4" bottom="4" verticalScrollPolicy="auto" 
						horizontalScrollPolicy="auto" >
				<s:Group id="formSection"  width="100%" height="100%" minWidth="0" minHeight="0" >
					
					
				</s:Group>
			</s:Scroller>
		</s:Group>
	</s:HGroup>
	<s:Group width="100%" id="wizardMode" height="40" >
		<s:Rect  left="0" right="0" top="0" bottom="0">
			<s:fill>
				<s:LinearGradient rotation="90">
					<!--<s:GradientEntry color="0XB9B9B9" />-->
					<s:GradientEntry color="0XE3E3E3" />
					<s:GradientEntry color="0XB9B9a6" />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:HGroup  left="16" right="16" top="2" bottom="2" verticalAlign="middle" >
			<s:Button  id="backBtn" label="Back" fontSize="16" fontWeight="bold" click="wizardBtn_clickHandler(event)" />
			<s:Spacer width="100%"/>
			<s:Button id="nextBtn" label="Next" fontSize="16" fontWeight="bold" click="wizardBtn_clickHandler(event)"/>
		</s:HGroup>
					
	</s:Group>
	<s:VGroup id="tileMode" width="100%" height="100%" minWidth="0" minHeight="0" >
		
		<!--<s:controlBarContent>
			<s:Label text="rDashboard" fontWeight="bold"/>
		</s:controlBarContent>-->
		
		<s:Group left="0" right="0" top="0" height="30" clipAndEnableScrolling="true">
			<s:Rect left="0" right="0" top="0" bottom="0">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="#858585" ratio=".2" />
						<s:GradientEntry color="#676767"  />
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<s:List id="podMinimizedList" verticalCenter="0"
					skinClass="com.rectius.examples.pod.assets.skins.PodListMinimizedSkin"
					itemRenderer="com.rectius.examples.pod.assets.itemrenderer.PodListItemRenderer" 
					dataProvider="{podManager.minimizedPods}">
				<s:layout>
					<s:HorizontalLayout 
						paddingBottom="3" paddingLeft="2" 
						paddingTop="3" paddingRight="2" />
				</s:layout>
			</s:List>
		</s:Group>
		<components:PodManager id="podManager"  width="100%" height="100%" minWidth="0" minHeight="0" 
							   skinClass="com.rectius.examples.pod.assets.skins.PodManagerVerticalSkin" >
		</components:PodManager>
	</s:VGroup>
	
	
	<fx:Script>
		<![CDATA[
			import com.adobe.devnet.events.PodStateChangeEvent;
			import com.adobe.devnet.managers.PodLayoutManager;
			import com.adobe.devnet.view.Pod;
			import com.rectius.examples.pod.assets.skins.PodManagerVerticalSkin;
			import com.rectius.examples.pod.components.Pod;
			import com.rectius.examples.pod.components.PodWindow;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			
			import spark.events.IndexChangeEvent;
			
			import ehs.EHS;
			
			import print.IServerManager;
			import print.ServerManager;
			
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.unlinkBindableProperty;
			import weave.compiler.StandardLib;
			import weave.core.CallbackCollection;
			import weave.core.LinkableString;
			import weave.core.LinkableVariable;
			import weave.core.LinkableWatcher;
			private var _idToComponent:Object = {}; // String -> IVisualElement
			private var _componentToId:Dictionary = new Dictionary(true); // IVisualElement -> String
			
			
			
			[Bindable]
			public var linkData:ArrayCollection = new ArrayCollection();
			
			private var _activeSectionUI:IVisualElement;
			
			
			private function addPod(component:IVisualElement):void{
				var pod:com.adobe.devnet.view.Pod = new com.adobe.devnet.view.Pod();
				pod.id = id;
				//pod.setStyle(
				_idToPod[id] = pod;
				pod.title = id;
				
				pod.addElement(component);
				manager.minimizedItems.push(pod);
				callLater(manager.updateLayout,[false]);
			}
			
			private function addFormPod(component:IVisualElement):void{
				var pod:com.rectius.examples.pod.components.Pod = new com.rectius.examples.pod.components.Pod();
				pod.id = id;
				_idToPod[id] = pod;
				pod.title = id;
				pod.addElement(component);
				//podManager.minimizedPods.addItem(pod);
				//podManager.firstContainer.addElement(pod);
				podManager.addPod(pod as PodWindow);
			}
			
			/**
			 * Adds a component to the layout.
			 * @param id A unique identifier for the component.
			 * @param component The component to add to the layout.
			 */		
			public function addComponent(id:String, component:IVisualElement):void
			{
				if (!id)
					throw new Error("id cannot be null or empty String");
				if (_idToComponent[id] != component)
				{
					if (_idToComponent[id])
						throw new Error("id already exists: " + id);
					_idToComponent[id] = component;
					_componentToId[component] = id;
					linkData.addItem(id);
					if((layoutWatcher.target as LinkableString).value  == TILE){
						addFormPod(component)
					}
					getCallbackCollection(this).triggerCallbacks();
				}
			}
			
			/**
			 * Removes a component from the layout.
			 * @param id The id of the component to remove.
			 */
			public function removeComponent(id:String):void
			{
				var component:IVisualElement = _idToComponent[id] as IVisualElement;
				if (component)
				{
					if(layoutWatcher.target && (layoutWatcher.target as LinkableString).value  == TILE){
						var pod:com.rectius.examples.pod.components.Pod = _idToPod[id];
						delete _idToPod[id];
						//if (pod.parent)
							//pod.close();
					}
					delete _idToComponent[id];
					delete _componentToId[component];
					linkData.removeItem(id);
					getCallbackCollection(this).triggerCallbacks();
					
				}
			}
			
			
			/**
			 * Reorders the components. 
			 * @param orderedIds An ordered list of ids.
			 */
			public function setComponentOrder(orderedIds:Array):void
			{
				// do nothing if order didn't change
				if (StandardLib.compare(orderedIds, getComponentOrder()) == 0)
					return;
				
				getCallbackCollection(this).delayCallbacks();
				var childIndex:int = 0;
				for each (var id:String in orderedIds)
				{
					var newIndex:int = childIndex++;
					linkData.setItemAt(id,newIndex);
					if((layoutWatcher.target as LinkableString).value  == TILE){
						//podManager.firstElements = [];
						var component:IVisualElement = _idToComponent[id] as IVisualElement;
						if (component)
						{
							//if (component.parent == podManager)
								//podManager.minimizedPods.addItemAt(component,newIndex);
								podManager.addPod(component as PodWindow);
							//getCallbackCollection(this).triggerCallbacks();
						}
					}
					
				}
				_currentOrder = orderedIds;
				getCallbackCollection(this).resumeCallbacks();
			}
			
			private var _currentOrder:Array;
			private function get currentOrder():Array{
				if(!_currentOrder) _currentOrder = getComponentOrder();
				return _currentOrder;
			}
			
			/**
			 * This is an ordered list of ids in the layout.
			 */		
			public function getComponentOrder():Array
			{
				var result:Array = [];
				for (var index:int = 0; index < linkData.length; index++)
				{
					var componentID:String = linkData.getItemAt(index) as String;					
					if (componentID)
						result.push(componentID);
				}
				_currentOrder = result;
				return result;
			}
			
			
			/**
			 * This function can be used to check if a component still exists in the layout.
			 */		
			public function hasComponent(id:String):Boolean
			{
				return _idToComponent[id] is IVisualElement;
			}
			
			/**
			 * This is called when the object is disposed.
			 */
			public function dispose():void
			{
				getCallbackCollection(this).delayCallbacks();				
				for each (var id:String in getComponentOrder())
					removeComponent(id);
				if(_activeSectionUI)
					formSection.removeElement(_activeSectionUI);	
				_selectedItemWatcher.target = null;
				layoutWatcher.target = null;
				_activeSectionUI = null;
				getCallbackCollection(this).resumeCallbacks();
			}
			
			private const _selectedItemWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, changeSection, true);
			
			
			public function set activeSection(value:LinkableString):void
			{
				if(_selectedItemWatcher.target)
					unlinkBindableProperty(_selectedItemWatcher.target as LinkableVariable,pageMenu,'selectedItem');
				_selectedItemWatcher.target = value;				
			}
			
			
			
			private function changeSection():void{
				var ls:LinkableString = _selectedItemWatcher.target as LinkableString;
				if(ls)linkBindableProperty(ls,pageMenu,'selectedItem');
				if(ls && ls.value){
					var ui:IVisualElement = _idToComponent[ls.value] as IVisualElement;
					if(_activeSectionUI && formSection.containsElement(_activeSectionUI)){
						formSection.removeElement(_activeSectionUI);
					}
					formSection.addElement(ui);
					_activeSectionUI = ui;
					
					
					for(var i:int = 0; i < currentOrder.length; i++){
						if(currentOrder[i] == ls.value){
							currentSectionIndex = i;
							break;
						}
					}
					if((layoutWatcher.target as LinkableString).value == WIZARD){
						if(currentSectionIndex >= 0 && currentSectionIndex <= currentOrder.length){
							backBtn.visible = nextBtn.visible = true;
							if (currentSectionIndex == currentOrder.length){
								nextBtn.visible = false;
							}else if(currentSectionIndex == 0){
								backBtn.visible = false;
							}
						}
						else{
							backBtn.visible = nextBtn.visible = false;
						}
					}
					
				}
				else{
					if(_activeSectionUI)formSection.removeElement(_activeSectionUI);
					_activeSectionUI = null;
				}
			}
			
			
			private const layoutWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, changeLayout);
			
			public const WIZARD:String = "wizard";
			public const TAB:String = "tab";
			public const TILE:String = "tile";
			public function set layoutMode(value:LinkableString):void
			{
				layoutWatcher.target = value;
			}
			
			
			private function changeLayout():void{
				var ls:LinkableString = layoutWatcher.target as LinkableString;
				if(ls){
					if(ls.value  == TAB){
						menuMode.includeInLayout = menuMode.visible = true;
						viewArea.includeInLayout = viewArea.visible = true;
						wizardMode.includeInLayout = wizardMode.visible = false;
						tileMode.includeInLayout = tileMode.visible = false;
						formSection.removeAllElements();
						linkData.refresh();
						
					}
					else if(ls.value  == WIZARD){
						menuMode.includeInLayout = menuMode.visible = false;
						viewArea.includeInLayout = viewArea.visible = true;
						wizardMode.includeInLayout = wizardMode.visible = true;	
						tileMode.includeInLayout = tileMode.visible = false;
						formSection.removeAllElements();
						
					}else if(ls.value  == TILE){
						manager.container = formSection;
						manager.addEventListener(PodStateChangeEvent.CLOSE, handlePodClose);
						
						menuMode.includeInLayout = menuMode.visible = false;
						//viewArea.includeInLayout = viewArea.visible = false;
						wizardMode.includeInLayout = wizardMode.visible = false;
						//tileMode.includeInLayout = tileMode.visible = true;
						
						var orderedIds:Array = currentOrder;
						var childIndex:int = 0;
						for each (var id:String in orderedIds)
						{
							var component:IVisualElement = _idToComponent[id] as IVisualElement;
							if (component)
							{
								//addFormPod(component);
								addPod(component);
							}
						}
						
					}
					if(_selectedItemWatcher.target)
						(_selectedItemWatcher.target as CallbackCollection).triggerCallbacks();
				}
				
			}
			
			private var _idToPod:Object = {}; // String -> Pod			
			public const manager:PodLayoutManager = new PodLayoutManager();
			private function handlePodClose(event:Event):void
			{
				removeComponent(manager.closedPod.id);
			}
			
			
			
			
			
			// saving here is important 
			// so that while navigating in seesion state the saveing on the server wont get called
			protected function pageMenu_changeHandler(event:IndexChangeEvent):void
			{
				(_selectedItemWatcher.target as LinkableString).value  = event.target.selectedItem;
				if(EHS.properties.autoSave.value){					
					var pm:ServerManager =  WeaveAPI.ClassRegistry.getSingletonInstance(IServerManager) as ServerManager;
					pm.saveSessionStateToServer();						
				}				
			}
			
			
			
			private var currentSectionIndex:int = -1;
			
			
			protected function wizardBtn_clickHandler(event:MouseEvent):void
			{
				var newSelectionIndex:int;
				if(currentSectionIndex > -1){
					if(event.target == backBtn){
						newSelectionIndex = currentSectionIndex - 1;
						
					}else if(event.target == nextBtn){
						newSelectionIndex = currentSectionIndex + 1;
					}
				}
				
				if(newSelectionIndex >= 0 && newSelectionIndex <= currentOrder.length){
					var ls:LinkableString = _selectedItemWatcher.target as LinkableString;
					ls.value = currentOrder[newSelectionIndex];
				}
				
			}
			
		]]>
	</fx:Script>
	
</s:VGroup>
