<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
			 alpha.disabledStates="0.5" blendMode="normal">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.TextArea")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			import mx.core.FlexVersion;
			private var lineBreakChanged:Boolean;
			private var paddingChanged:Boolean;
			private var verticalAlignChanged:Boolean;
			
			static private const exclusions:Array = ["background", "scroller", "promptDisplay", "border"];
			static private const exclusions_4_0:Array = ["background", "scroller", "promptDisplay"];
			
			override public function get colorizeExclusions():Array 
			{
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
				{
					return exclusions_4_0;
				}
				
				return exclusions;
			}
			
			static private const contentFill:Array = ["bgFill"];
			
			override public function get contentItems():Array {return contentFill};
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (lineBreakChanged)
				{
					updateStringStyle("lineBreak");
					lineBreakChanged = false;
				}
				if (paddingChanged)
				{
					updatePadding();
					paddingChanged = false;
				}
				if (verticalAlignChanged)
				{
					updateStringStyle("verticalAlign");
					verticalAlignChanged = false;
				}
			}
			
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == true)
				{
					border.visible = true;
					shadow.visible = true;
					background.left = background.top = background.right = background.bottom = 1;
					textDisplay.left = textDisplay.top = textDisplay.right = 1;
					if (promptDisplay)
					{
						promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
						promptDisplay.setLayoutBoundsPosition(1, 1);
					}
				}
				else
				{
					border.visible = false;
					shadow.visible = false;
					background.left = background.top = background.right = background.bottom = 0;
					if (promptDisplay)
					{
						promptDisplay.setLayoutBoundsSize(unscaledWidth - 1, unscaledHeight - 1);
						promptDisplay.setLayoutBoundsPosition(1, 1);
					}
				}
				
				borderStroke.color = getStyle("borderColor");
				borderStroke.alpha = getStyle("borderAlpha");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function updatePadding():void
			{
				if (!textDisplay)
					return;
				
				var padding:Number;
				
				padding = getStyle("paddingLeft");
				if (textDisplay.getStyle("paddingLeft") != padding)
					textDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (textDisplay.getStyle("paddingTop") != padding)
					textDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (textDisplay.getStyle("paddingRight") != padding)
					textDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (textDisplay.getStyle("paddingBottom") != padding)
					textDisplay.setStyle("paddingBottom", padding);
				
				if (!promptDisplay)
					return;
				
				padding = getStyle("paddingLeft");
				if (promptDisplay.getStyle("paddingLeft") != padding)
					promptDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (promptDisplay.getStyle("paddingTop") != padding)
					promptDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (promptDisplay.getStyle("paddingRight") != padding)
					promptDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (promptDisplay.getStyle("paddingBottom") != padding)
					promptDisplay.setStyle("paddingBottom", padding);
			}
			
			/**
			 *  @private
			 */
			private function updateStringStyle(styleName:String):void
			{
				if (!textDisplay)
					return;
				
				var style:String;
				
				style = getStyle(styleName);
				if (textDisplay.getStyle(styleName) != style)
					textDisplay.setStyle(styleName, style);
				
				if (!promptDisplay)
					return;
				
				style = getStyle(styleName);
				if (promptDisplay.getStyle(styleName) != style)
					promptDisplay.setStyle(styleName, style);
			}
			
			override public function styleChanged(styleProp:String):void
			{
				var allStyles:Boolean = !styleProp || styleProp == "styleName";
				
				super.styleChanged(styleProp);
				
				if (allStyles || styleProp.indexOf("lineBreak") == 0)
				{
					lineBreakChanged = true;
					invalidateProperties();
				}
				if (allStyles || styleProp.indexOf("padding") == 0)
				{
					paddingChanged = true;
					invalidateProperties();
				}
				if (allStyles || styleProp.indexOf("verticalAlign") == 0)
				{
					verticalAlignChanged = true;
					invalidateProperties();
				}
			}
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			/** 
			 * @private 
			 */     
			private static const focusExclusions:Array = ["textDisplay"];
			
			/**
			 *  @private
			 */
			override public function get focusSkinExclusions():Array { return focusExclusions;};
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled" stateGroups="disabledStates"/>
		<s:State name="normalWithPrompt"/>
		<s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
	</s:states>
	
	<s:Rect id="border" left="0" right="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke id="borderStroke" weight="1"/>            
		</s:stroke>
	</s:Rect>
	
	<s:Rect id="background" left="1" right="1" top="1" bottom="1">
		<s:fill>
			<s:SolidColor id="bgFill" color="0xFFFFFF" />
		</s:fill>
	</s:Rect>
	
	<s:Rect id="shadow" left="1" top="1" right="1" height="1">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0.12" />
		</s:fill>
	</s:Rect>
	
	<s:RichEditableText   id="textDisplay" left="0" right="0" top="0" />
	
	<s:Label id="promptDisplay"
			 mouseEnabled="false" mouseChildren="false"
			 includeIn="normalWithPrompt,disabledWithPrompt" 
			 includeInLayout="false"
			 />            
	
</s:SparkSkin>
