<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 implements="weave.api.core.ILinkableObject"  >
	
	<!--
	width="100%" height="{ imgControls.height + imageHolder.height + 80}" 
	click="titlewindow1_clickHandler(event)" title="{imageName.text}" -->
	
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" radiusX="4" radiusY="4">
		<s:stroke>
			<s:SolidColorStroke id="borderStroke" weight="1" color="0x005500"/>            
		</s:stroke>
	</s:Rect>
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElementContainer;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.api.reportError;
			import weave.api.core.ILinkableObject;
			import weave.core.LinkableString;
			
			/**
			 * This is the image cache.
			 */
			public static const urlToImageMap:Object = new Object(); // maps a url to a BitmapData
			
			public static function imagesAsBitmapData(keys:Array):Array{
				var imagesAsBitmapData:Array = new Array();
				for (var i:int = 0; i < keys.length ; i++){
					var ls:LinkableString = keys[i] as LinkableString;
					imagesAsBitmapData.push(urlToImageMap[ls.value]);
				}
				return imagesAsBitmapData;
			}
				
			
			private var _imageUrl:LinkableString;

			
			public function set imageUrl(urlObject:LinkableString):void
			{
				_imageUrl = urlObject;
				_imageUrl.addImmediateCallback(this,addBytesToLoader);
			}
			
			private function addBytesToLoader():void{	
				if (_imageUrl && urlToImageMap[_imageUrl.value] === undefined) // only request image if not already requested
				{
					urlToImageMap[_imageUrl.value] = null; // set this here so we don't make multiple requests
					WeaveAPI.URLRequestUtils.getContent(this, new URLRequest(_imageUrl.value), handleImageDownload, handleFault, _imageUrl.value);
				}
				else{
					
					loadBitmapData();
					
				}
							
			}
			
			private function loadBitmapData():void{
				var bitmap:Bitmap = urlToImageMap[_imageUrl.value];
				if(!image.source)
					image.source = bitmap
				//(image.source as Bitmap).bitmapData =  bitmapData;
			}
			
			private function handleImageDownload(event:ResultEvent, token:Object = null):void
			{
				var bitmap:Bitmap = event.result as Bitmap;
				
				var bitmapData:BitmapData = bitmap.bitmapData;
				
				var imageOriginalWidth:Number = bitmapData.width;
				var imageOriginalHeight:Number = bitmapData.height;
				if(imageOriginalWidth > imageOriginalHeight){
					bitmap.width = imageWidth;
					bitmap.height = imageOriginalHeight *  imageWidth / imageOriginalWidth ;
				}
				else{
					bitmap.height = imageHeight;
					bitmap.width = imageOriginalWidth *  imageHeight / imageOriginalHeight ;
				}				
				/*image.width  = imgFileLoader.content.width;
				image.height = imgFileLoader.content.height;*/
				
				
				urlToImageMap[token] = bitmap;
				loadBitmapData();
				
			}
			
			/**
			 * This function is called when there is an error downloading an image.
			 */
			private function handleFault(event:FaultEvent, token:Object=null):void
			{
				reportError(event);
			}

			
			
			

			
			
			protected function image_closeHandler(e:Event):void
			{				
				(parent as IVisualElementContainer).removeElement(this);
			}
			
			
			
			
			private var imageWidth:Number = 200;
			private var imageHeight:Number= 200;
			
			private function createImage(e:Event):void{					
				var imgFileLoader:Loader = Loader(e.target.loader);				
				image.source = imgFileLoader;				
				var imageOriginalWidth:Number = imgFileLoader.width;
				var imageOriginalHeight:Number = imgFileLoader.height;
				if(imageOriginalWidth > imageOriginalHeight){
					imgFileLoader.content.width = imageWidth;
					imgFileLoader.content.height =imgFileLoader.height *  imageWidth / imageOriginalWidth ;
				}
				else{
					imgFileLoader.content.height = imageHeight;
					imgFileLoader.content.width =imgFileLoader.width *  imageHeight / imageOriginalHeight ;
				}				
				image.width  = imgFileLoader.content.width;
				image.height = imgFileLoader.content.height;
				
				
				imgFileLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, createImage); 
				
			}
			
			
			
			
			
			
		]]>
	</fx:Script>
	
	
	
	<s:VGroup left="2" right="4" top="2" bottom="2">
		<s:TextInput id="imageLabel" text=""  textAlign="center" prompt="Image Name" />	
		<s:VGroup  id="imageHolder" left="2" right="2" top="2" bottom="2"  >	
			
			
			<s:Image id="image" />
			<s:Label  text="{imageLabel.text}"/>
			
		</s:VGroup>
	</s:VGroup>
	<s:Button id="closeButton" label="x"  width="20%" right="0"  />	
</s:Group>
