<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:ui="weave.ui.*" label="{lang('Tool')}" >
	<s:layout>
		<s:FormLayout/>
	</s:layout>
	<s:HGroup id="titleControls" width="100%">
		<s:Label text="{lang('Window title:')}"/>
		<s:TextInput id="titleInput"
					 width="100%"
					 toolTip="{lang('Entering a title here will override the automatic title generated by the tool.')}"/>
	</s:HGroup>
	
	<s:HGroup>
		<ui:CustomCheckBox id="moveResizeCB" label="{lang('Allow move and resize')}"/>
		<ui:HelpComponent>
			Windows will always be movable and resizable when editing a visualization as an Admin.
		</ui:HelpComponent>
	</s:HGroup>
	
	<ui:CheckBoxWithNestedOptions id="borderCB" label="{lang('Show borders')}">
		<ui:CustomCheckBox id="zOrderCB" label="{labelShowButton(DraggablePanel.TOOLTIP_ZORDER)}"/>
		<ui:CustomCheckBox id="minCB" label="{labelShowButton(DraggablePanel.TOOLTIP_MINIMIZE)}"/>
		<ui:CustomCheckBox id="maxCB" label="{labelShowButton(DraggablePanel.TOOLTIP_MAXIMIZE)}"/>
		<ui:CustomCheckBox id="closeCB" label="{labelShowButton(DraggablePanel.TOOLTIP_CLOSE)}"/>
		<ui:Indent label="{lang('Border color')}">
			<ui:CustomColorPicker id="borderColorPicker" change="borderColorPicked();"/>
			<s:Button label="{lang('Reset')}" click="_panel.panelBorderColor.value = NaN;"/>
		</ui:Indent>
	</ui:CheckBoxWithNestedOptions>
	
	<ui:Indent label="{lang('Background color')}">
		<ui:CustomColorPicker id="backgroundColorPicker" change="backgroundColorPicked();"/>
		<s:Button label="{lang('Reset')}" click="_panel.panelBackgroundColor.value = NaN;"/>
	</ui:Indent>
	<ui:Indent label="{lang('Menu color')}">
		<ui:CustomColorPicker id="menubackgroundColorPicker" change="menuBackgroundColorPicked();"/>
		<s:Button label="{lang('Reset')}" click="_panel.panelBackgroundColor.value = NaN;"/>
	</ui:Indent>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import ehs.EHS;
			import ehs.EHSTool;
			
			import weave.api.linkBindableProperty;
			import weave.ui.DraggablePanel;
			
			[Bindable]
			private var _panel:EHSTool = null;
			
			private function labelShowButton(buttonToolTip:String):String
			{
				return lang('Show button "{0}"', lang(buttonToolTip));
			}
			
			
			
			public function setTarget(panel:EHSTool):void
			{
				if (_panel)
					throw new Error(lang("target should not be set more than once"));
				
				_panel = panel;
				_panel.panelBackgroundColor.addGroupedCallback(this, backgroundColorCallback, true);
				_panel.addEventListener(FlexEvent.UPDATE_COMPLETE, function(..._):void { backgroundColorCallback(); });
				
				_panel.panelBorderColor.addGroupedCallback(this, borderColorCallback, true);
				_panel.addEventListener(FlexEvent.UPDATE_COMPLETE, function(..._):void { borderColorCallback(); });
				
				linkBindableProperty(_panel.panelTitle, titleInput, 'text', 500);
				linkBindableProperty(_panel.enableMoveResize, moveResizeCB, 'selected');
				linkBindableProperty(_panel.enableBorders, borderCB, 'selected');
				linkBindableProperty(_panel.enableZOrder, zOrderCB, 'selected');
				linkBindableProperty(_panel.minimizable, minCB, 'selected');
				linkBindableProperty(_panel.maximizable, maxCB,'selected');
				linkBindableProperty(_panel.closeable, closeCB, 'selected');
			}
			
			private function backgroundColorCallback():void
			{
				backgroundColorPicker.selectedColor = _panel.getStyle('backgroundColor');
			}
			private function backgroundColorPicked():void
			{
				_panel.panelBackgroundColor.value = backgroundColorPicker.selectedColor;
				
			}
			
			private function menuBackgroundColorPicked():void
			{
				EHS.properties.menuBackgroundColor.value = menubackgroundColorPicker.selectedColor;
				
			}
			private function borderColorCallback():void
			{
				borderColorPicker.selectedColor = _panel.getStyle('borderColor');
			}
			private function borderColorPicked():void
			{
				_panel.panelBorderColor.value = borderColorPicker.selectedColor;
			}
		]]>
	</fx:Script>
	
</s:NavigatorContent>
